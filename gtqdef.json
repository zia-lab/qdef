{"gtqdef": ["sympy.core.Dummy"], "sympy.core.Dummy": [], "gtqdef.Ynm.eval": ["sympy.functions.elementary.exponential.exp", "sympy.core.sympify"], "sympy.core.sympify": [], "sympy.functions.elementary.exponential.exp": [], "gtqdef.Ynm._eval_expand_func": ["sympy.functions.combinatorial.factorials.factorial", "sympy.functions.elementary.miscellaneous.sqrt", "sympy.functions.elementary.exponential.exp", "sympy.functions.assoc_legendre", "sympy.functions.elementary.trigonometric.cos", "sympy.functions.elementary.trigonometric.sin"], "sympy.functions.combinatorial.factorials.factorial": [], "sympy.functions.elementary.miscellaneous.sqrt": [], "sympy.functions.elementary.trigonometric.cos": [], "sympy.functions.assoc_legendre": [], "sympy.functions.elementary.trigonometric.sin": [], "gtqdef.Ynm.fdiff": ["sympy.functions.elementary.trigonometric.cot", "sympy.core.function.ArgumentIndexError", "sympy.functions.elementary.miscellaneous.sqrt", "sympy.functions.elementary.exponential.exp"], "sympy.core.function.ArgumentIndexError": [], "sympy.functions.elementary.trigonometric.cot": [], "gtqdef.Ynm._eval_rewrite_as_polynomial": [], "gtqdef.Ynm._eval_rewrite_as_sin": [], "gtqdef.Ynm._eval_rewrite_as_cos": ["sympy.simplify.trigsimp", "sympy.simplify.simplify"], "sympy.simplify.simplify": [], "sympy.simplify.trigsimp": [], "gtqdef.Ynm._eval_conjugate": [], "gtqdef.Ynm.as_real_imag": ["sympy.functions.combinatorial.factorials.factorial", "sympy.functions.elementary.miscellaneous.sqrt", "sympy.functions.assoc_legendre", "sympy.functions.elementary.trigonometric.cos", "sympy.functions.elementary.trigonometric.sin"], "gtqdef.Ynm._eval_evalf": ["sympy.Expr._from_mpmath", "mpmath.mp.spherharm", "mpmath.workprec"], "mpmath.workprec": [], "mpmath.mp.spherharm": [], "sympy.Expr._from_mpmath": [], "gtqdef.Ynm._sage_": ["sage.all.spherical_harmonic"], "sage.all.spherical_harmonic": [], "gtqdef.CrystalGroup.__init__": ["gtqdef.CrystalGroup.addRepDegrees"], "gtqdef.CrystalGroup.addRepDegrees": ["numpy.array"], "gtqdef.CrystalGroup.addParameterTable": ["gtqdef.CrystalGroup.addElementCharacters", "<builtin>.len"], "gtqdef.CrystalGroup.addElementCharacters": ["numpy.insert", "<builtin>.len", "numpy.arange", "numpy.array", "gtqdef.CrystalGroup.elementPositions"], "<builtin>.len": [], "gtqdef.CrystalGroup.elementPositions": ["numpy.cumsum", "numpy.insert"], "numpy.cumsum": [], "numpy.insert": [], "numpy.array": [], "numpy.arange": [], "gtqdef.CrystalGroup.addSpaceGroupElements": [], "gtqdef.CrystalGroup.printPointGroup": [], "gtqdef.CrystalGroup.printClasses": [], "gtqdef.CrystalGroup.printIrrReps": ["<builtin>.print"], "<builtin>.print": [], "gtqdef.CrystalGroup.printCharacterTable": ["<builtin>.print"], "gtqdef.CrystalGroup.printchartable": [], "gtqdef.CPGroups.__init__": ["<builtin>.int", "gtqdef.CPGroups.SortGroups", "os.walk", "<builtin>.len", "numpy.arange", "gtqdef.CPGroups.ParseSpaceGroupTable", "gtqdef.CPGroups.GetGroup", "gtqdef.CPGroups.ParseParameterTable", "gtqdef.CPGroups.ParseCharacterTable", "os.getcwd"], "os.getcwd": [], "os.walk": [], "gtqdef.CPGroups.ParseCharacterTable": ["gtqdef.CrystalGroup.__init__", "<builtin>.int", "<builtin>.len", "<builtin>.open", "csv.reader", "os.getcwd", "<builtin>.eval"], "<builtin>.int": [], "gtqdef.CPGroups.GetGroup": [], "gtqdef.CPGroups.ParseParameterTable": ["<builtin>.int", "<builtin>.len", "<builtin>.open", "csv.reader", "os.getcwd", "<builtin>.eval"], "gtqdef.CPGroups.ParseSpaceGroupTable": ["<builtin>.int", "<builtin>.len", "<builtin>.open", "csv.reader", "os.getcwd", "<builtin>.eval"], "gtqdef.CPGroups.SortGroups": ["operator.attrgetter"], "<builtin>.open": [], "csv.reader": [], "<builtin>.eval": [], "operator.attrgetter": [], "gtqdef.CPGroups.PrintGroupList": ["<builtin>.print", "<builtin>.len", "numpy.arange"], "gtqdef.RYlm": ["<builtin>.int", "sympy.Symbol", "gtqdef.Wigner_D", "numpy.arange"], "sympy.Symbol": [], "gtqdef.Wigner_D": ["numpy.array", "sympy.simplify", "gtqdef.Wigner_d", "<builtin>.abs"], "gtqdef.SymmetryAdaptedWF": ["sympy.simplify", "<builtin>.len", "numpy.arange", "<builtin>.isinstance", "<builtin>.abs", "gtqdef.RYlm"], "<builtin>.isinstance": [], "sympy.simplify": [], "<builtin>.abs": [], "gtqdef.Wigner_d": ["numpy.max", "sympy.Sum", "<builtin>.int", "sympy.factorial", "numpy.min", "sympy.cos", "sympy.sin"], "numpy.max": [], "numpy.min": [], "sympy.factorial": [], "sympy.cos": [], "sympy.sin": [], "sympy.Sum": [], "gtqdef.B_CF": ["sympy.symbols"], "sympy.symbols": [], "gtqdef.C_CF": ["numpy.sqrt"], "numpy.sqrt": [], "gtqdef.GetSALCs": ["numpy.array", "gtqdef.SymmetryAdaptedWF", "numpy.arange"], "gtqdef.RealCheck": ["<builtin>.len", "numpy.arange", "<builtin>.print", "sympy.re", "numpy.ones"], "numpy.ones": [], "sympy.re": [], "gtqdef.SALC_SymTest": ["<builtin>.len", "numpy.arange"], "gtqdef.GenerateBList": ["numpy.isnan", "<builtin>.int", "numpy.expand_dims", "gtqdef.B_CF", "numpy.isinf", "numpy.arange", "numpy.array", "gtqdef.CompareBlist", "numpy.sqrt", "<builtin>.abs", "numpy.ones"], "gtqdef.CompareBlist": ["<builtin>.abs", "numpy.zeros", "<builtin>.len", "numpy.arange"], "numpy.expand_dims": [], "numpy.isnan": [], "numpy.isinf": [], "gtqdef.CFP": ["gtqdef.SALC_SymTest", "gtqdef.RealCheck", "gtqdef.GetSALCs", "<builtin>.print", "<builtin>.abs", "gtqdef.GenerateBList"], "gtqdef.Ckq": ["sympy.Symbol"], "numpy.zeros": [], "gtqdef.fmt_table": ["math.ceil", "<builtin>.max", "<builtin>.len", "<builtin>.str"], "<builtin>.max": [], "<builtin>.str": [], "math.ceil": [], "gtqdef.Ckq2THI": ["gtqdef.ThreeHarmonicIntegrate"], "gtqdef.ThreeHarmonicIntegrate": ["sympy.physics.quantum.cg.CG", "sympy.sqrt"], "sympy.sqrt": [], "sympy.physics.quantum.cg.CG": [], "gtqdef.SingleElectronSplitting": ["sympy.Symbol", "<builtin>.list", "sympy.simplify", "<builtin>.int", "<builtin>.len", "numpy.arange", "<builtin>.print", "sympy.Matrix", "numpy.array", "<builtin>.isinstance", "<builtin>.abs", "gtqdef.CFP", "<builtin>.enumerate"], "sympy.Matrix": [], "<builtin>.list": [], "<builtin>.enumerate": [], "gtqdef.Yrot": ["gtqdef.RYlm"]}
